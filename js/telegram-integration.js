// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –±–æ—Ç–æ–º –¥–ª—è Barbershop Chillout
class TelegramIntegration {
    constructor() {
        this.botUsername = 'CHILLOUT_BARBER_bot';
        this.botUrl = `https://t.me/${this.botUsername}`;
        this.init();
    }

    init() {
        this.setupBookingButtons();
        this.setupQRCodeHandlers();
        this.trackTelegramClicks();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–ø–∏—Å–∏
    setupBookingButtons() {
        const bookingButtons = document.querySelectorAll('a[href*="t.me"]');
        bookingButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                this.handleBookingClick(e, button);
            });
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–ø–∏—Å–∏
    handleBookingClick(event, button) {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        this.trackEvent('booking_click', {
            source: 'website',
            button_type: button.className,
            timestamp: new Date().toISOString()
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Telegram
        if (this.isMobileDevice()) {
            // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            this.openTelegramApp(button.href);
        } else {
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
            window.open(button.href, '_blank', 'noopener,noreferrer');
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ QR-–∫–æ–¥–∞
    setupQRCodeHandlers() {
        const qrCodes = document.querySelectorAll('.qr-code, .qr-small img');
        qrCodes.forEach(qr => {
            qr.addEventListener('click', () => {
                this.handleQRClick();
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            qr.title = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Telegram –±–æ—Ç';
            qr.style.cursor = 'pointer';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ QR-–∫–æ–¥—É
    handleQRClick() {
        this.trackEvent('qr_click', {
            source: 'qr_code',
            timestamp: new Date().toISOString()
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram –±–æ—Ç
        window.open(this.botUrl, '_blank', 'noopener,noreferrer');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ Telegram –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏!', 'info');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    openTelegramApp(url) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const appUrl = url.replace('https://t.me/', 'tg://resolve?domain=');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π iframe –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = appUrl;
        document.body.appendChild(iframe);

        // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–≤–µ—Ä—Å–∏—é
        setTimeout(() => {
            document.body.removeChild(iframe);
            window.open(url, '_blank', 'noopener,noreferrer');
        }, 1000);
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    trackEvent(eventName, data) {
        // Google Analytics
        if (typeof gtag !== 'undefined') {
            gtag('event', eventName, {
                custom_parameter: JSON.stringify(data)
            });
        }

        // –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∞
        if (typeof ym !== 'undefined') {
            ym(123456789, 'reachGoal', eventName, data);
        }

        // –ö–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`Telegram Event: ${eventName}`, data);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `telegram-notification telegram-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">üì±</span>
                <span class="notification-text">${message}</span>
            </div>
        `;
        
        // –°—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
            font-family: 'Inter', sans-serif;
        `;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    // –¶–≤–µ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    getNotificationColor(type) {
        const colors = {
            info: '#3498db',
            success: '#27ae60',
            warning: '#f39c12',
            error: '#e74c3c'
        };
        return colors[type] || colors.info;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    generateQRCode(text, size = 150) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
        const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(text)}`;
        return qrUrl;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞
    updateQRCode(selector, text) {
        const qrElement = document.querySelector(selector);
        if (qrElement) {
            qrElement.src = this.generateQRCode(text);
            qrElement.alt = `QR-–∫–æ–¥ –¥–ª—è ${text}`;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
    async checkBotAvailability() {
        try {
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ fetch
            const response = await fetch(`https://t.me/${this.botUsername}`, {
                method: 'HEAD',
                mode: 'no-cors'
            });
            return true;
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞:', error);
            return false;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –¥–ª—è Telegram
    addShareButton() {
        const shareText = encodeURIComponent('Barbershop Chillout - –ª—É—á—à–∏–π –±–∞—Ä–±–µ—Ä –≤ –¢–∏–º–∞—à–µ–≤—Å–∫–µ! –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞: https://t.me/CHILLOUT_BARBER_bot');
        const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(window.location.href)}&text=${shareText}`;
        
        const shareButton = document.createElement('a');
        shareButton.href = shareUrl;
        shareButton.target = '_blank';
        shareButton.rel = 'noopener noreferrer';
        shareButton.className = 'telegram-share-btn';
        shareButton.innerHTML = 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram';
        shareButton.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #0088cc;
            color: white;
            padding: 10px 15px;
            border-radius: 25px;
            text-decoration: none;
            font-size: 14px;
            box-shadow: 0 3px 10px rgba(0,136,204,0.3);
            z-index: 999;
            transition: all 0.3s ease;
        `;
        
        shareButton.addEventListener('mouseenter', () => {
            shareButton.style.transform = 'translateY(-2px)';
            shareButton.style.boxShadow = '0 5px 15px rgba(0,136,204,0.4)';
        });
        
        shareButton.addEventListener('mouseleave', () => {
            shareButton.style.transform = 'translateY(0)';
            shareButton.style.boxShadow = '0 3px 10px rgba(0,136,204,0.3)';
        });
        
        document.body.appendChild(shareButton);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const telegramIntegration = new TelegramIntegration();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        telegramIntegration.addShareButton();
    }, 2000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    telegramIntegration.checkBotAvailability().then(available => {
        if (!available) {
            console.warn('Telegram –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.TelegramIntegration = TelegramIntegration;